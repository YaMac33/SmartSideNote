document.addEventListener('DOMContentLoaded', () => {
    const archetypes = [
        {
            id: 'loop',
            name: 'ÂèçÂæ©„É´„Éº„ÉóÂûã',
            icon: 'üîÑ',
            color: 'blue',
            title: 'ÂèçÂæ©„ÅÆÁæéÂ≠¶ÔºöÂñúÂäáÁöÑ„Ç®„É≥„Ç∏„É≥„Å®„Åó„Å¶„ÅÆ„É´„Éº„Éó„Å®ÂÆöÂûã',
            description: 'Âé≥Ê†º„Å™ÂÆöÂûãÊßãÈÄ†„ÇíÂèçÂæ©„Åó„ÄÅ„Åù„ÅÆ‰∫àÊ∏¨ÂèØËÉΩÊÄß„Å®Ë£èÂàá„Çä„ÅßÁ¨ë„ÅÑ„ÇíÁîü„ÇÄ„Çπ„Çø„Ç§„É´„ÄÇË¶≥ÂÆ¢„ÅØ„Éç„Çø„ÅÆ„Äå„É´„Éº„É´„Äç„ÇíÂ≠¶Áøí„Åó„ÄÅ„Ç≤„Éº„É†„Å´ÂèÇÂä†„Åô„Çã„Çà„ÅÜ„Å™ÊÑüË¶ö„ÅßÊ•Ω„Åó„ÇÄ„ÄÇ',
            case_studies: [
                { name: '„Éü„É´„ÇØ„Éú„Éº„Ç§', detail: '„ÄåËÇØÂÆö‚ÜíÂê¶ÂÆö„Äç„ÅÆÂé≥Ê†º„Å™4ÊÆµÈöé„É´„Éº„Éó„ÄÇÈßíÂ†¥„ÅåÊèêÁ§∫„Åô„ÇãÊÉÖÂ†±„Å´ÂØæ„Åó„ÄÅÂÜÖÊµ∑„ÅåÊñ≠ÂÆö„Å®Âê¶ÂÆö„ÇíÁπ∞„ÇäËøî„Åô„ÄÇË¶≥ÂÆ¢„ÅØÊ¨°„Å´„Å©„Çì„Å™ÊÉÖÂ†±„ÅåÂá∫„Çã„Åã„Çí‰∫àÊ∏¨„Åó„ÄÅÂÜÖÊµ∑„ÅÆÂÅèË¶ã„Å´Ê∫Ä„Å°„ÅüÁêÜÁî±‰ªò„Åë„Å´Á¨ë„ÅÜ„ÄÇ' },
                { name: '„Éä„Ç§„ÉÑ', detail: '„Äå„É§„Éõ„ÉºÊº´Êâç„Äç„Å´‰ª£Ë°®„Åï„Çå„ÇãË®Ä„ÅÑÈñìÈÅï„ÅÑ„ÅÆÂÆöÂûã„ÄÇÂ°ô„ÅåÊôÇ‰∫ã„Éç„Çø„ÅÆ‰∏≠„ÅßÊÑèÂõ≥ÁöÑ„Å´ÂçòË™û„ÇíË®Ä„ÅÑÈñìÈÅï„Åà„ÄÅÂúüÂ±ã„ÅåÊ∑°„ÄÖ„Å®Ë®ÇÊ≠£„ÅóÁ∂ö„Åë„Çã„ÄÇÊßãÈÄ†„ÅÆÂçòÁ¥î„Åï„Åå„ÄÅÈ´òÂ∫¶„Å™Ë®ÄËëâÈÅä„Å≥„ÅÆÈù¢ÁôΩ„Åï„ÇíÈöõÁ´ã„Åü„Åõ„Çã„ÄÇ' }
            ],
            chart_data: {
                labels: ['ÊßãÈÄ†„ÅÆ‰∫àÊ∏¨ÊÄß', '„Ç≠„É£„É©„ÇØ„Çø„Éº‰æùÂ≠òÂ∫¶', 'Â±ïÈñã„ÅÆÊÑèÂ§ñÊÄß', 'Ë¶≥ÂÆ¢„Å®„ÅÆÂÖ±ÊÑü', '„Ç∏„Éß„Éº„ÇØ„ÅÆÂØÜÂ∫¶'],
                data: [5, 2, 3, 4, 4]
            }
        },
        {
            id: 'character',
            name: '„Ç≠„É£„É©„ÇØ„Çø„Éº„Éª„É°„ÇøÂûã',
            icon: 'üé≠',
            color: 'purple',
            title: '„ÄåËá™Â∑±„Äç„ÅÆÁâ©Ë™ûÔºö„Ç≠„É£„É©„ÇØ„Çø„Éº‰∏ªÂ∞éÂûã„Å®„É°„ÇøÂñúÂäá',
            description: 'ÊºîËÄÖËá™Ë∫´„ÅÆ„Éë„Éñ„É™„ÉÉ„ÇØ„Ç§„É°„Éº„Ç∏„ÇÑ„ÄÅÊº´Êâç„Å®„ÅÑ„ÅÜË°åÁÇ∫„Åù„ÅÆ„ÇÇ„ÅÆ„ÇíÁ¨ë„ÅÑ„ÅÆÊ∫êÊ≥â„Å®„Åô„Çã„Çπ„Çø„Ç§„É´„ÄÇ„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆ„Äå„Ç∫„É¨„Äç„ÇÑ„Äå„Éç„Ç¨„ÉÜ„Ç£„Éñ„Åï„Äç„ÅåÁâ©Ë™û„ÇíÈßÜÂãï„Åô„Çã„ÄÇ',
            case_studies: [
                { name: '„Ç™„Éº„Éâ„É™„Éº', detail: 'Ëã•Êûó„ÅåÊåØ„Çã„ÉÜ„Éº„Éû„Å´ÂØæ„Åó„ÄÅÊò•Êó•„ÅåÂ∏∏„Å´„Äå„Ç∫„É¨„Åü„ÄçÂèçÂøú„ÇíËøî„Åô„ÄÇËã•Êûó„ÅÆ„ÉÑ„ÉÉ„Ç≥„Éü„ÅØ„ÄÅ„Åù„ÅÆ‰∏çÈÅ©Âàá„ÅïËá™‰Ωì„ÇíÊîªÊíÉ„Åô„Çã„ÄÇ‰∫å‰∫∫„ÅÆÈñ¢‰øÇÊÄß„ÇÑ„ÄÅÊº´Êâç„ÅåÊàêÁ´ã„Åó„Å™„ÅÑ„Åì„Å®Ëá™‰Ωì„ÅåÁ¨ë„ÅÑ„Å´„Å™„Çã„É°„ÇøÊßãÈÄ†„ÄÇ' },
                { name: '„Éñ„É©„ÉÉ„ÇØ„Éû„É®„Éç„Éº„Ç∫', detail: 'ÂêâÁî∞„ÅÆÊ†πÊ∑±„ÅÑ„Éç„Ç¨„ÉÜ„Ç£„Éñ„Åï„Å®Ë¢´ÂÆ≥Â¶ÑÊÉ≥„Åå„ÄÅÊó•Â∏∏ÁöÑ„Å™Ë©±È°å„ÇíÁï∞Â∏∏„Å™ÊåÅË´ñ„Å∏„Å®Â±ïÈñã„Åï„Åõ„Çã„ÄÇÂ∞èÊùâ„ÅÆ„ÉÑ„ÉÉ„Ç≥„Éü„ÅØ„ÄÅË¶≥ÂÆ¢„Çí„ÄåÁèæÂÆü„Äç„Å´Âºï„ÅçÊàª„ÅôÈå®„Å®„Åó„Å¶Ê©üËÉΩ„Åó„ÄÅÂêâÁî∞„ÅÆÁâπÁï∞ÊÄß„ÇíÂÆâÂÖ®„Å™Á¨ë„ÅÑ„Å´Â§â„Åà„Çã„ÄÇ' }
            ],
            chart_data: {
                labels: ['ÊßãÈÄ†„ÅÆ‰∫àÊ∏¨ÊÄß', '„Ç≠„É£„É©„ÇØ„Çø„Éº‰æùÂ≠òÂ∫¶', 'Â±ïÈñã„ÅÆÊÑèÂ§ñÊÄß', 'Ë¶≥ÂÆ¢„Å®„ÅÆÂÖ±ÊÑü', '„Ç∏„Éß„Éº„ÇØ„ÅÆÂØÜÂ∫¶'],
                data: [2, 5, 4, 5, 3]
            }
        },
        {
            id: 'escalation',
            name: '‰∏çÊù°ÁêÜ„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥Âûã',
            icon: 'üìà',
            color: 'red',
            title: '„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥„ÅÆÂäõÂ≠¶ÔºöÊó•Â∏∏„Åã„ÇâÈùûÊó•Â∏∏„Å∏',
            description: '„Åî„ÅèÊôÆÈÄö„ÅÆÊó•Â∏∏ÁöÑ„Å™Ë®≠ÂÆö„Åã„ÇâÂßã„Åæ„Çä„ÄÅ„Éú„Ç±„ÅÆÁÑ°ËÉΩ„Åï„ÇÑÂ¶ÑÊÉ≥„Å´„Çà„Å£„Å¶Áä∂Ê≥Å„ÅåÂæê„ÄÖ„Å´„ÄÅ„Åó„Åã„ÅóÁ¢∫ÂÆü„Å´Á†¥Â£ä„Åï„Çå„ÄÅÊ∑∑Ê≤å„Åå„Ç®„Çπ„Ç´„É¨„Éº„Éà„Åó„Å¶„ÅÑ„Åè„Ç≥„É≥„ÉàÊº´Êâç„ÄÇ',
            case_studies: [
                { name: '„Çµ„É≥„Éâ„Ç¶„Ç£„ÉÉ„ÉÅ„Éû„É≥', detail: '„Éî„Ç∂„ÅÆÊ≥®Êñá„Å™„Å©„ÄÅ„ÅÇ„Çä„Åµ„Çå„ÅüÁä∂Ê≥Å„ÅßÂØåÊæ§„ÅåÁêÜËß£‰∏çËÉΩ„Å™„Éú„Ç±„ÇíÈÄ£Áô∫„ÄÇ‰ºäÈÅî„ÅÆ„Äå„Å°„Çá„Å£„Å®‰ΩïË®Ä„Å£„Å¶„Çã„Åã„Çè„Åã„Çì„Å™„ÅÑ„Äç„Å®„ÅÑ„ÅÜ„ÉÑ„ÉÉ„Ç≥„Éü„ÅØ„ÄÅË¶≥ÂÆ¢„ÅÆÂõ∞ÊÉë„Çí‰ª£ÂºÅ„Åó„ÄÅÂº∑„ÅÑÂÖ±ÊÑü„ÇíÁîü„ÇÄ„ÄÇ' },
                { name: '„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´', detail: 'Âæ≥‰∫ï„ÅåÊó•Â∏∏ÁöÑ„Å™È°åÊùê„Åã„ÇâÂ£ÆÂ§ß„Åß‰∏çÈÅ©Âàá„Å™Â¶ÑÊÉ≥„ÇíÁπ∞„ÇäÂ∫É„Åí„ÄÅÁ¶èÁî∞„ÅåÂøÖÊ≠ª„Å´ÁèæÂÆü„Å´Âºï„ÅçÊàª„Åù„ÅÜ„Å®ÊäµÊäó„Åô„Çã„ÄÇË¶≥ÂÆ¢„ÅØÂæ≥‰∫ï„ÅÆÂ¶ÑÊÉ≥„ÅÆÂÖ±ÁäØËÄÖ„Å®„Å™„Çä„ÄÅËÉåÂæ≥ÁöÑ„Å™Á¨ë„ÅÑ„ÇíÊ•Ω„Åó„ÇÄ„ÄÇ' }
            ],
            chart_data: {
                labels: ['ÊßãÈÄ†„ÅÆ‰∫àÊ∏¨ÊÄß', '„Ç≠„É£„É©„ÇØ„Çø„Éº‰æùÂ≠òÂ∫¶', 'Â±ïÈñã„ÅÆÊÑèÂ§ñÊÄß', 'Ë¶≥ÂÆ¢„Å®„ÅÆÂÖ±ÊÑü', '„Ç∏„Éß„Éº„ÇØ„ÅÆÂØÜÂ∫¶'],
                data: [3, 4, 5, 5, 3]
            }
        },
        {
            id: 'density',
            name: 'È´òÂØÜÂ∫¶ÂºæÂπïÂûã',
            icon: 'üí•',
            color: 'orange',
            title: '„Éö„Éº„Çπ„Å®„ÅÑ„ÅÜÂäõÔºöÈ´òÂØÜÂ∫¶„ÉªÈ´òÈÄüÊº´Êâç',
            description: 'Áâ©Ë™û„ÅÆË§áÈõë„Åï„Çà„Çä„ÇÇ„ÄÅÂúßÂÄíÁöÑ„Å™„Çπ„Éî„Éº„Éâ„Å®„Ç∏„Éß„Éº„ÇØ„ÅÆÈáè„ÅßË¶≥ÂÆ¢„ÇíÂà∂Âúß„Åô„Çã„Çπ„Çø„Ç§„É´„ÄÇË¶≥ÂÆ¢„ÅØËÄÉ„Åà„ÇãÊöá„Å™„Åè„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆ„Ç®„Éç„É´„ÇÆ„Éº„Å´È£≤„ÅøËæº„Åæ„Çå„Çã„ÄÇ',
            case_studies: [
                { name: 'NON STYLE', detail: 'ÂçòÁ¥î„Å™Ë®≠ÂÆö„ÅÆ‰∏≠„Åß„ÄÅ„Éú„Ç±„ÅÆÁü≥Áî∞„ÅåÊÅØ„Å§„ÅèÊöá„ÇÇ‰∏é„Åà„Åö„Éú„Ç±„ÇíÈÄ£Â∞Ñ„Åô„Çã„ÄÇ‰∫ï‰∏ä„ÅÆÈ´òÈÄü„ÉÑ„ÉÉ„Ç≥„Éü„Åå„Åù„ÅÆ„É™„Ç∫„É†„ÇíÊîØ„Åà„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂÖ®‰Ωì„Åå ÌïòÎÇòÏùòË¶ã‰∏ñÁâ©„Å®„Å™„Çã„ÄÇ' }
            ],
            chart_data: {
                labels: ['ÊßãÈÄ†„ÅÆ‰∫àÊ∏¨ÊÄß', '„Ç≠„É£„É©„ÇØ„Çø„Éº‰æùÂ≠òÂ∫¶', 'Â±ïÈñã„ÅÆÊÑèÂ§ñÊÄß', 'Ë¶≥ÂÆ¢„Å®„ÅÆÂÖ±ÊÑü', '„Ç∏„Éß„Éº„ÇØ„ÅÆÂØÜÂ∫¶'],
                data: [2, 3, 4, 3, 5]
            }
        }
    ];

    const selectorContainer = document.getElementById('archetype-selector');
    const displayContainer = document.getElementById('content-display');
    let currentChart = null;

    // Create archetype selector cards
    archetypes.forEach(archetype => {
        const card = document.createElement('div');
        card.className = `archetype-card bg-white p-4 rounded-lg shadow-md cursor-pointer border-4 border-transparent text-center`;
        card.dataset.id = archetype.id;
        card.innerHTML = `
            <div class="text-4xl mb-2">${archetype.icon}</div>
            <h3 class="font-bold text-gray-800">${archetype.name}</h3>
        `;
        card.addEventListener('click', () => displayArchetype(archetype));
        selectorContainer.appendChild(card);
    });

    function displayArchetype(archetype) {
        // Update active card style
        document.querySelectorAll('.archetype-card').forEach(card => {
            card.classList.toggle('active', card.dataset.id === archetype.id);
        });

        displayContainer.innerHTML = ''; // Clear previous content
        displayContainer.classList.remove('content-fade-in');
        void displayContainer.offsetWidth; // Trigger reflow
        displayContainer.classList.add('content-fade-in');

        const content = `
            <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">
                <div class="lg:col-span-3">
                    <h2 class="text-3xl font-bold text-gray-800 mb-2">${archetype.title}</h2>
                    <p class="text-gray-600 mb-6">${archetype.description}</p>
                    <h3 class="text-xl font-bold text-gray-700 mt-8 mb-4">„Ç±„Éº„Çπ„Çπ„Çø„Éá„Ç£</h3>
                    <div class="space-y-4">
                        ${archetype.case_studies.map(cs => `
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h4 class="font-bold text-lg text-gray-800">${cs.name}</h4>
                                <p class="text-gray-600 mt-1">${cs.detail}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
                <div class="lg:col-span-2">
                    <div class="chart-container">
                        <canvas id="archetypeChart"></canvas>
                    </div>
                </div>
            </div>
        `;
        displayContainer.innerHTML = content;
        createRadarChart(archetype.chart_data);
    }

    function createRadarChart(chartData) {
        if (currentChart) {
            currentChart.destroy();
        }
        const ctx = document.getElementById('archetypeChart').getContext('2d');
        currentChart = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: 'ÁâπÊÄßÂàÜÊûê',
                    data: chartData.data,
                    backgroundColor: 'rgba(37, 99, 235, 0.2)',
                    borderColor: 'rgba(37, 99, 235, 1)',
                    borderWidth: 2,
                    pointBackgroundColor: 'rgba(37, 99, 235, 1)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgba(37, 99, 235, 1)'
                }]
            },
            options: {
                maintainAspectRatio: false,
                scales: {
                    r: {
                        angleLines: {
                            display: true
                        },
                        suggestedMin: 0,
                        suggestedMax: 5,
                        pointLabels: {
                            font: {
                                size: 14,
                                weight: 'bold'
                            }
                        },
                         ticks: {
                            stepSize: 1
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            title: function(tooltipItems) {
                                const item = tooltipItems[0];
                                let label = item.chart.data.labels[item.dataIndex];
                                if (Array.isArray(label)) {
                                  return label.join(' ');
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });
    }
});
